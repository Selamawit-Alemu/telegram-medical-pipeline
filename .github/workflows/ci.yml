# .github/workflows/ci.yml

name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres: # This is the service name, refer to it as 'postgres' in your steps
        image: postgres:15 # Use the PostgreSQL 15 image
        env:
          POSTGRES_USER: ${{ secrets.PGUSER }}
          POSTGRES_PASSWORD: ${{ secrets.PGPASSWORD }}
          POSTGRES_DB: ${{ secrets.PGDATABASE }}
          # --- NEW: Also set PGUSER for use in health check options ---
          PGUSER_FOR_HEALTHCHECK: ${{ secrets.PGUSER }}
        ports:
          - 5432:5432 # Map the port (optional for internal communication, but good practice)
        options: >- # Health check to ensure DB is ready
          --health-cmd "pg_isready -U $PGUSER_FOR_HEALTHCHECK" # --- IMPORTANT: Reference the env var directly ---
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache Python dependencies
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Create .env file from secrets
        run: |
          echo "TELEGRAM_API_ID=${{ secrets.TELEGRAM_API_ID }}" >> .env
          echo "TELEGRAM_API_HASH=${{ secrets.TELEGRAM_API_HASH }}" >> .env
          echo "CHANNELS=${{ secrets.CHANNELS }}" >> .env
          echo "PGUSER=${{ secrets.PGUSER }}" >> .env
          echo "PGPASSWORD=${{ secrets.PGPASSWORD }}" >> .env
          echo "PGDATABASE=${{ secrets.PGDATABASE }}" >> .env
          echo "POSTGRES_HOST=postgres" >> .env
          echo "PGPORT=5432" >> .env
          echo "PHONE=${{ secrets.PHONE }}" >> .env
          echo "PGHOST=postgres" >> .env
          echo "RAW_DATA_DIR=data/raw" >> .env
        env:
          TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
          TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          CHANNELS: ${{ secrets.CHANNELS }}
          PGUSER: ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          PGPORT: 5432
          PHONE: ${{ secrets.PHONE }}

      - name: Run dbt tests
        run: |
          cd telegram_dbt
          dbt debug --profile your_profile_name
          dbt deps
          dbt build --select +your_staging_models --target ci
          dbt test --target ci
        env:
          PGUSER: ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          POSTGRES_HOST: postgres
          PGPORT: 5432

      # ... (rest of your CI steps for Python/FastAPI tests if you add them later) ...